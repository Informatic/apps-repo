{
  "packages": [
    {
      "id": "org.webosbrew.hbchannel",
      "title": "Homebrew Channel",
      "iconUri": "https://raw.githubusercontent.com/webosbrew/webos-homebrew-channel/main/assets/icon160.png",
      "manifestUrl": "https://github.com/webosbrew/webos-homebrew-channel/releases/latest/download/org.webosbrew.hbchannel.manifest.json",
      "category": "system",
      "description": "Features\n--------\n\n* Independent webOS package repository\n    * Homebrew discovery, installation & updates\n\n* (root) Root execution service that can be easily used by webOS homebrew\n  developers without a need of separate privilege escalation handling (`luna://org.webosbrew.hbchannel.service/exec`)\n* (root) Disable some telemetry\n* (root) Startup user hooks (executable scripts present in `/var/lib/webosbrew/init.d` are run on bootup)\n* (root) Remote access\n    * SSH - public key authenticated (with default `alpine` password until\n      authorized keys are provisioned)\n    * Telnet - unauthenticated, use sparingly\n* (root) Failsafe mode\n    * In case a device crashes on boot only an emergency shell will be exposed\n      via telnet. In order to disable it fix the original crash cause and remove\n      `/var/luna/preferences/webosbrew_failsafe` flag file.\n\nDevelopment\n-----------\n\n### Environment\nSome libraries used by this project are submodules of this repository. Use\nfollowing command when cloning:\n```sh\ngit clone --recursive https://github.com/webosbrew/webos-homebrew-channel\n```\n\nAll required development packages are distributed via npm. In order to install\nthem in a local directory run:\n```sh\nnpm install\n```\n\n### Technology stack\nFrontend is based on last development version of [enyo](https://github.com/enyojs).\n(dated january 2017) While this definitely is not the cool and jazzy latest\ntechnology, it provides us with a sensible UI toolkit for TV-based application\nthat seems to work pretty well with versions of webOS as old as 1.x. We are\ncurrently using enyo built-in `enyo-dev` packager. This requires us to write\ncode that'll be run directly on target platforms (no babel/transpilation of newer\nES dialects - no arrow functions, no const, no promises, etc.). In the future\nwe may migrate to some webpack-based solution around that.\n\nService is packaged using webpack & babel, thus, with enough shims and patches,\nwe can write and use some modern ES features (like Promises, arrow functions,\nasync functions, const, etc.) while targeting NodeJS 0.10 (used on earliest\nwebOS versions)\n\n\n### Production build\n```sh\nrm -rf dist && npm run build -- --production && npm run build-service -- --env production && npm run package\n```\n\n### Full application testing / deployment\n```sh\nrm -rf dist && npm run build && npm run build-service && npm run package && npm run deploy && npm run launch\nssh root@10.0.0.2 -p 9922 /media/developer/apps/usr/palm/services/org.webosbrew.hbchannel.service/elevate-service\n```\n\n### Service testing\n```sh\nnpm run build-service && \\\n    cat dist/services/service.js | ssh root@10.0.0.2 -p 9922 sh -c 'cat > /media/developer/apps/usr/palm/services/org.webosbrew.hbchannel.service/service.js && pkill -f org.webosbrew.hbchannel.service'\nssh root@10.0.0.2 -p 9922 /usr/bin/run-js-service -k -n /media/developer/apps/usr/palm/services/org.webosbrew.hbchannel.service\n```"
    },
    {
      "id": "com.limelight.webos",
      "title": "Moonlight",
      "iconUri": "https://github.com/mariotaku/moonlight-tv/raw/main/deploy/webos/icon.png",
      "manifestUrl": "https://github.com/mariotaku/moonlight-tv/releases/latest/download/com.limelight.webos.manifest.json",
      "category": "games",
      "description": "# Moonlight TV\n\nMoonlight TV is a GUI front end for [Moonlight GameStream Client](https://moonlight-stream.org/). With some components from [moonlight-embedded](https://github.com/irtimmer/moonlight-embedded).\nIt was originally designed for LG webOS TVs, but may support running on more devices in the future.\n\n## Features\n\n* Supports up to 4 controllers\n* Utilizes system hardware decoder to get best performance (webOS 3/4/5)\n* Easy to port to other OSes (Now runs on macOS, Linux, Raspberry Pi)\n\n## Screenshots\n\n![Launcher](https://user-images.githubusercontent.com/830358/106390397-9c162380-642b-11eb-948f-529e7f0d5e5e.png)\n\n![Settings](https://user-images.githubusercontent.com/830358/106390394-9a4c6000-642b-11eb-8870-3c8c6e4a5c78.png)\n\n![In-game Overlay](https://user-images.githubusercontent.com/830358/106390396-9b7d8d00-642b-11eb-8f34-58ae4f037f2e.png)\n\n## Download\n\nDownload IPK from [Latest release](https://github.com/mariotaku/moonlight-tv/releases/latest)\n\n## [Installation Guide](https://github.com/mariotaku/moonlight-tv/wiki/Installation-Guide)\n\n## [Compatibility Status](https://github.com/mariotaku/moonlight-tv/wiki/Compatibility-Status)\n\n## [Gamepad Setup](https://github.com/mariotaku/moonlight-tv/wiki/Gamepad-Setup)\n\n## Building for webOS\n\n- Follow instructions [here](https://github.com/webosbrew/meta-lg-webos-ndk) to setup NDK\n- Create a directory e.g. `build` in project root directory, and `cd` into it.\n- run `cmake .. -DTARGET_WEBOS=ON`\n- run `make webos-package-moonlight` to get IPK package in `build` directory"
    }
  ]
}